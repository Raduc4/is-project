// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Payments {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  eventId      String   @db.ObjectId
  ticketAmount Int
  price        Float
  currency     String
  paymentType  String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  Ticket       Ticket[]
}

model Ticket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  passengerName String
  phone         String
  adults        Int    @default(1)
  children      Int    @default(0)
  seniors       Int    @default(0)

  outboundFlightId String @db.ObjectId
  outboundFlight   Flight @relation("OutboundFlightTickets", fields: [outboundFlightId], references: [id])

  returnFlightId String? @db.ObjectId
  returnFlight   Flight? @relation("ReturnFlightTickets", fields: [returnFlightId], references: [id])

  seatClass SeatType

  withMeal     Boolean @default(false)
  extraBaggage Boolean @default(false)

  basePriceCents  Int
  optionsFeeCents Int    @default(0)
  discountPercent Int    @default(0) 
  totalPriceCents Int 
  currency        String @default("EUR")

  ticketType         TicketType
  ticketPurchaseType TicketPurchaseType

  paymentId String?   @db.ObjectId
  payment   Payments? @relation(fields: [paymentId], references: [id])

  location    String
  description String
  dateFrom    DateTime
  dateTo      DateTime
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  email            String     @unique
  phone            String?    @unique
  passwordHash     String?
  avatar           String?
  confirmationCode Int
  eventIDs         String[]   @db.ObjectId
  role             UserRole
  payments         Payments[]
  bookedIDs        String[]   @db.ObjectId
}

model Flight {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime @default(now())
  flightCode          String
  planeId             String   @db.ObjectId
  plane               Plane    @relation("flight", fields: planeId, references: [id])
  departureLocationId String   @db.ObjectId
  departureLocation   GisNode  @relation("DepartureLocation", fields: [departureLocationId], references: [id])

  arrivalLocationId String  @db.ObjectId
  arrivalLocation   GisNode @relation("ArrivalLocation", fields: [arrivalLocationId], references: [id])

  outboundTickets Ticket[] @relation("OutboundFlightTickets")
  returnTickets   Ticket[] @relation("ReturnFlightTickets")

  departureDate DateTime
  arrivalDate   DateTime

  flightData FlightData?
}

model FlightData {
  id                       String     @id @default(auto()) @map("_id") @db.ObjectId
  flightId                 String     @unique @db.ObjectId
  flight                   Flight     @relation(fields: [flightId], references: [id])
  date                     DateTime
  classOneSeatsNr          Int
  classEconomySeatsNr      Int
  classBusinessSeatsNr     Int
  classOneBookedSeats      Int
  classEconomyBookedSeats  Int
  classBusinessBookedSeats Int
  flightType               FlightType
}

model GisNode {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime @default(now())
  name             String
  description      String?
  uname            String
  flightId         String?  @db.ObjectId
  departureFlights Flight[] @relation("DepartureLocation")
  arrivalFlights   Flight[] @relation("ArrivalLocation")
}

model Plane {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  planeModel String
  Flight     Flight[] @relation("flight")
}

enum FlightType {
  REGULAR
  SEASONAL
}

enum TicketType {
  ONE_WAY
  ROUND_TRIP
}

enum TicketPurchaseType {
  REGULAR
  LAST_MINUTE
  ROUND_TRIP
}

enum UserRole {
  USER
  ADMIN
}

enum SeatType {
  ECONOMY
  BUSINESS
  FIRST
}
