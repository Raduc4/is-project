// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Payments {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  eventId      String   @db.ObjectId
  ticketAmount Int
  price        Float
  currency     String
  paymentType  String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  // event       Event    @relation(fields: [eventId], references: [id])
}

model Ticket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  title       String
  price       Float
  location    String
  description String
  dateFrom    DateTime
  dateTo      DateTime
  days        String[]
  ticketType  TicketType
  ticketPurchaseType TicketPurchaseType

  bookedByUsers   User[]   @relation("bookedEvents", fields: [bookedByUserIds], references: [id])
  bookedByUserIds String[] @db.ObjectId

  author   User   @relation("tickets", fields: [authorId], references: [id])
  authorId String @db.ObjectId

  savedByUserIds String[] @db.ObjectId
  savedByUsers   User[]   @relation("save", fields: [savedByUserIds], references: [id])
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  email            String     @unique
  phone            String?    @unique
  passwordHash     String?
  avatar           String?
  confirmationCode Int
  tickets          Ticket[]   @relation("tickets")
  eventIDs         String[]   @db.ObjectId
  savedTickets     Ticket[]   @relation("save", fields: [eventIDs], references: [id])
  role             UserRole
  payments         Payments[]
  bookedIDs        String[]   @db.ObjectId
  bookedTickets    Ticket[]   @relation("bookedEvents", fields: [bookedIDs], references: [id])
}

model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?  @unique
  address     String?
  city        String?
  country     String?
  postalCode  String?
}

model Flight {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  flightCode  String
  planeId     String   @db.ObjectId
  plane       Plane    @relation("flight", fields: planeId, references: [id])
  departureLocationId String   @db.ObjectId
  departureLocation   GisNode  @relation("DepartureLocation", fields: [departureLocationId], references: [id]) 

  arrivalLocationId   String   @db.ObjectId
  arrivalLocation     GisNode  @relation("ArrivalLocation", fields: [arrivalLocationId], references: [id])

  departureDate DateTime
  arrivalDate   DateTime

  flightData  FlightData?
  }

model FlightData {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  flightId    String   @db.ObjectId @unique
  flight      Flight   @relation(fields: [flightId], references: [id])
  date        DateTime
  classOneSeatsNr Int
  classEconomySeatsNr Int
  classBusinessSeatsNr Int
  classOneBookedSeats Int
  classEconomyBookedSeats Int
  classBusinessBookedSeats Int
  flightType FlightType
}

model GisNode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  name       String
  description String?
  uname String
  flightId String? @db.ObjectId
  departureFlights Flight[] @relation("DepartureLocation")
  arrivalFlights   Flight[] @relation("ArrivalLocation") 
}
model Plane {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  planeModel String
  Flight     Flight[] @relation("flight")
}

enum FlightType {
  REGULAR
  SEASONAL
}

enum TicketType {
  ONE_WAY
  ROUND_TRIP
}

enum TicketPurchaseType {
  REGULAR
  LAST_MINUTE
  ROUND_TRIP
}
enum UserRole {
  USER
  ADMIN
}
